#include "services_dune.fcl"

process_name: SignalShapingDUNE35tTest

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "ss_test_dune35t.root" }
}

services.WireReadout: @local::dune_wire_readout
services.GeometryConfigurationWriter: {}
services.AuxDetGeometry: @local::dune35t_auxdet_geo
services.Geometry:           @local::dune35t_geo
services.DetectorClocksService:        @local::dune35t_detectorclocks
services.DetectorPropertiesService: @local::dune35t_detproperties
services.LArPropertiesService:      @local::dune35t_properties
services.LArFFT:             @local::dune35t_larfft
services.SignalShapingServiceDUNE35t: @local::dune35t_signalshapingservice
services.DatabaseUtil:       @local::dune35t_database
services.DatabaseUtil.ShouldConnect: false

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   0       # Number of events to create
}

outputs:
{
}

physics:
{

 analyzers:
 {
  sstest: { module_type: "SignalShapingDUNE35tTest" }
 }

 #define the path for analyzer modules, order does not matter.
 #see lines starting physics.analyzers below
 ana:  [ sstest ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana]  
}

physics.analyzers.sstest:
{
  module_type: "SignalShapingDUNE35tTest"
}
